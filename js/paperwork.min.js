angular.module('paperworkNotes', ['ngRoute', 'ngSanitize', 'ngAnimate', 'angularFileUpload', 'ab-base64'])
.constant('paperworkApi', '/api/v1');

angular.module('paperworkNotes').config(function($routeProvider) {
  $routeProvider
  .when('/', {
    redirectTo:'/n/0'
  })
  .when('/n/:notebookId', {
    controller:'NotesAllController',
    templateUrl:'templates/paperworkNoteShow'
  })
  .when('/n/:notebookId/:noteId', {
    controller: 'NotesShowController',
    templateUrl:'templates/paperworkNoteShow'
  })
  .when('/n/:notebookId/:noteId/edit', {
    controller:'NotesEditController',
    templateUrl:'templates/paperworkNoteEdit'
  })
  .when('/s/:searchQuery', {
    controller:'SearchController',
    templateUrl:'templates/paperworkNoteShow'
  })
  .when('/s/:searchQuery/n/:notebookId/:noteId', {
    controller:'NotesShowController',
    templateUrl:'templates/paperworkNoteShow'
  })
  .when('/404', {
    controller:'FourOhFourController',
    templateUrl:'templates/paperwork404'
  })
  .otherwise({
    redirectTo:'/404'
  });
});

angular.module('paperworkNotes').filter('convertdate', function () {
    return function (value) {
        return (!value) ? '' : value.replace(/ /g, 'T');
    };
});
angular.module('paperworkNotes').controller('ConstructorController',
  ['$scope', '$rootScope', '$location', '$routeParams', 'NetService',
   function($scope, $rootScope, $location, $routeParams, paperworkNetService) {
     if($rootScope.initDone) {
       return;
     }
     $rootScope.initDone = true;

     // We need to close popovers, else they will hang up if the ng-view is being switched.
     $('body').on('mousedown', function(e) {
       $('[data-toggle="popover"]').each(function() {
         if(!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0) {
           $(this).popover('hide');
         }
       });
     });

     paperworkNetService.apiGet('/i18n', function(status, data) {
       if(status == 200) {
         $rootScope.i18n = data.response;
       }
     });

     $rootScope.modal = {
       'active': false,
       'next':   []
     };

     $rootScope.$on('paperworkModalVisible', function(ev, data) {
       $rootScope.modal.active = true;
     });

     $rootScope.$on('paperworkModalHidden', function(ev, data) {
       $rootScope.modal.active = false;

       if($rootScope.modal.next.length > 0) {
         if($rootScope.modal.next[0].callback) {
           $rootScope.modal.next[0].callback();
         }
         $rootScope.modal.next.splice(0, 1);
       }
     });

     $('#modalNotebook').on('hidden.bs.modal', function(e) {
       $(this).find('input[name="title"]').parents('.form-group').removeClass('has-warning');
     });

     $('.modal').on('hidden.bs.modal', function(e) {
       $rootScope.$broadcast('paperworkModalHidden', e);
     });

     $('.modal').on('show.bs.modal', function(e) {
       $rootScope.$broadcast('paperworkModalVisible', e);
     });

     $rootScope.menuItemNotebookClass = function() {
       if($rootScope.getNotebookSelectedId() != 0) {
         return '';
       } else {
         return 'disabled';
       }
     };

     $rootScope.menuItemNoteClass = function(availabilityType) {
       if($rootScope.getNoteSelectedId(true) != null && typeof $rootScope.notes != "undefined" && $rootScope.notes.length > 0) {
         if(availabilityType == 'single' && $rootScope.editMultipleNotes == true) {
           return 'disabled';
         } else {
           return '';
         }
       } else {
         return 'disabled';
       }
     };

     $rootScope.getVersionSelectedId = function(asObject) {
       if(asObject === true) {
         return $rootScope.versionSelectedId;
       }
       return $rootScope.versionSelectedId.notebookId + "-" + $rootScope.versionSelectedId.noteId + "-" + $rootScope.versionSelectedId.versionId;
     };

     $rootScope.modalGeneric = function(modalId, modalData) {
       var callback = function(data) {
         $rootScope.modalMessageBox = data;
         $('#' + modalId).modal('show');
       };
       if($rootScope.modal.active === false) {
         callback(modalData);
       } else {
         $rootScope.modal.next.push({
           'id':       modalId,
           'callback': function() {
             callback(modalData);
           }
         });
       }
     };

     $rootScope.messageBox = function(messageBoxData) {
       $rootScope.modalGeneric('modalMessageBox', messageBoxData);
     };

     $rootScope.modalNotebookSelect = function(modalData) {
       $rootScope.modalGeneric('modalNotebookSelect', modalData);
     };
   }]);

angular.module('paperworkNotes').controller('DefaultController',
  ['$scope', '$location', '$routeParams', 'NotesService',
   function($scope, $location, $routeParams, notesService) {
   }]);

angular.module('paperworkNotes').controller('FileUploadController',
  ['$scope', '$rootScope', '$location', '$routeParams', 'FileUploader', 'NotesService',
   function($scope, $rootScope, $location, $routeParams, FileUploader, paperworkNotesService) {
     var uploader = $scope.uploader = new FileUploader({
       url: $rootScope.uploadUrl
     });

     uploader.filters.push({
       name: 'customFilter',
       fn:   function(item /*{File|FileLikeObject}*/, options) {
         return this.queue.length < 10;
       }
     });

     uploader.onWhenAddingFileFailed = function(item /*{File|FileLikeObject}*/, filter, options) {
       // console.info('onWhenAddingFileFailed', item, filter, options);
     };
     uploader.onAfterAddingFile = function(fileItem) {
       // console.info('onAfterAddingFile', fileItem);
     };
     uploader.onAfterAddingAll = function(addedFileItems) {
       // console.info('onAfterAddingAll', addedFileItems);
     };
     uploader.onBeforeUploadItem = function(item) {
       // console.info('onBeforeUploadItem', item);
     };
     uploader.onProgressItem = function(fileItem, progress) {
       // console.info('onProgressItem', fileItem, progress);
     };
     uploader.onProgressAll = function(progress) {
       // console.info('onProgressAll', progress);
     };
     uploader.onSuccessItem = function(fileItem, response, status, headers) {
       // console.info('onSuccessItem', fileItem, response, status, headers);
     };
     uploader.onErrorItem = function(fileItem, response, status, headers) {
       // console.info('onErrorItem', fileItem, response, status, headers);
     };
     uploader.onCancelItem = function(fileItem, response, status, headers) {
       // console.info('onCancelItem', fileItem, response, status, headers);
     };
     uploader.onCompleteItem = function(fileItem, response, status, headers) {
       // console.info('onCompleteItem', fileItem, response, status, headers);
     };
     uploader.onCompleteAll = function() {
       // console.info('onCompleteAll');
       paperworkNotesService.getNoteVersionAttachments($rootScope.getNotebookSelectedId(), ($rootScope.getNoteSelectedId(true)).noteId,
         $rootScope.getVersionSelectedId(true).versionId, function(response) {
           $rootScope.fileList = response;
           uploader.clearQueue();
         });
     };

     $('#file-upload-dropzone').click(function() {
       $('#file-upload-input').click();
     });

     $scope.fileUploadDeleteFile = function(notebookId, noteId, versionId, attachmentId, isSure) {
       if(isSure != true) {
         $rootScope.messageBox({
           'title':   $rootScope.i18n.keywords.delete_attachment_question,
           'content': $rootScope.i18n.keywords.delete_attachment_message,
           'buttons': [
             {
               // We don't need an id for the dismiss button.
               // 'id': 'button-no',
               'label':     $rootScope.i18n.keywords.cancel,
               'isDismiss': true
             },
             {
               'id':    'button-yes',
               'label': $rootScope.i18n.keywords.yes,
               'class': 'btn-warning',
               'click': function() {
                 return $scope.fileUploadDeleteFile(notebookId, noteId, versionId, attachmentId, true);
               }
             }
           ]
         });
       } else {
         paperworkNotesService.deleteNoteVersionAttachment(notebookId, noteId, versionId, attachmentId, function(response) {
           var fileUrl = '/api/v1/notebooks/' + notebookId + '/notes/' + noteId + '/versions/' + versionId + '/attachments/' + attachmentId + '/raw';
           var i, l = $rootScope.fileList.length;
           for(i = 0; i < l; i++) {
             if(typeof $rootScope.fileList[i] != "undefined" && typeof $rootScope.fileList[i].id != "undefined" && $rootScope.fileList[i].id == attachmentId) {
               $rootScope.fileList.splice(i, 1);
             }
           }

           $rootScope.$broadcast('deleteAttachmentLink', {'url': fileUrl});
         });
       }
       return true;
       // console.log("notebookId " + notebookId + ' noteId ' + noteId + ' versionId ' + versionId + ' attachmentId ' + attachmentId);
     };

     $scope.fileUploadInsertFile = function(notebookId, noteId, versionId, attachmentId, attachment) {
       var fileUrl = '/api/v1/notebooks/' + notebookId + '/notes/' + noteId + '/versions/' + versionId + '/attachments/' + attachmentId + '/raw';
       $rootScope.$broadcast('insertAttachmentLink', {'url': fileUrl, 'filename': attachment.filename, 'mimetype': attachment.mimetype});
     };

     $scope.getFaClassFromMimetype = function(mimetype) {
       var mimematch = /(.+)\/(.+)/g.exec(mimetype);
       switch(mimematch[1]) {
         case 'image':
           return 'fa-file-image-o';
           break;
         case 'video':
           return 'fa-file-movie-o';
           break;
         case 'audio':
           return 'fa-file-audio-o';
           break;
         case 'application':
           switch(mimematch[2]) {
             case 'pdf':
               return 'fa-file-pdf-o';
               break;
             case 'zip':
               return 'fa-file-archive-o';
               break;
             default:
               return 'fa-file-o';
               break;
           }
           break;
         default:
           return 'fa-file-o';
           break;
       }
     };
   }]);

angular.module('paperworkNotes').controller('FourOhFourController',
  ['$scope', '$rootScope', '$location', '$routeParams', 'NotesService',
    function($scope, $rootScope, $location, $routeParams, notesService) {
      $rootScope.navbarMainMenu = true;
      $rootScope.navbarSearchForm = true;
      $rootScope.expandedNoteLayout = false;
    }]);

angular.module('paperworkNotes').directive('onFinishRender', function ($timeout) {
    return {
        restrict: 'A',
        link: function (scope, element, attr) {
            if (scope.$last === true) {
                $timeout(function () {
                    scope.$emit('ngRepeatFinished');
                });
            }
        }
    }});
angular.module('paperworkNotes').controller('MessageBoxController',
  ['$scope', '$rootScope', '$location', '$routeParams',
   function($scope, $rootScope, $location, $routeParams) {
     $scope.onClick = function(buttonId) {
       if(typeof buttonId == "undefined" || buttonId == null || buttonId == "") {
         return false;
       }

       var l = $rootScope.modalMessageBox.buttons.length;

       for(i = 0; i < l; i++) {
         if($rootScope.modalMessageBox.buttons[i].id == buttonId) {
           if(typeof $rootScope.modalMessageBox.buttons[i].click != "undefined") {
             if($rootScope.modalMessageBox.buttons[i].click()) {
               $('#modalMessageBox').modal('hide');
             }
             return;
           }
         }
       }
     };
   }]);

angular.module('paperworkNotes').factory('MessageBoxService',
  ['$rootScope', '$http', 'NetService',
   function($rootScope, $http, netService) {
     var paperworkMessageBoxFactory = {};

     return paperworkMessageBoxFactory;
   }]);

angular.module('paperworkNotes').service('NetService',
  ['$rootScope', '$http', '$location', '$window', 'paperworkApi',
   function($rootScope, $http, $location, $window, paperworkApi) {
     this.apiGeneric = function(method, url, data, callback) {
       var $opts = {method: method, url: paperworkApi + url, headers:{"X-Requested-With" : "XMLHttpRequest"}};
       if(typeof data != "undefined" && data != null) {
         $opts.data = data;
       }
       $http($opts).
         success(function(data, status, headers, config) {
           if(status == 302) {
             $headrz = headers();
             if(typeof $headrz.location != "undefined" && $headrz.location != null && $headrz.location != "") {
               $location.path($headrz.location);
               return false;
             }
           }
           callback(status, data);
         }).
         error(function(data, status, headers, config) {
           if(status == 401) {
             $window.location.reload();
             return false;
           }
           callback(status, data);
         });
     };

     this.apiGet = function(url, callback) {
       this.apiGeneric('GET', url, null, callback);
     };

     this.apiPost = function(url, data, callback) {
       this.apiGeneric('POST', url, data, callback);
     };

     this.apiPut = function(url, data, callback) {
       this.apiGeneric('PUT', url, data, callback);
     };

     this.apiDelete = function(url, callback) {
       this.apiGeneric('DELETE', url, null, callback);
     };
   }]);

angular.module('paperworkNotes').factory('NotebooksService',
  ['$rootScope', '$http', 'NetService',
   function($rootScope, $http, netService) {
     var paperworkNotebooksServiceFactory = {};

     // paperworkNotebooksServiceFactory.selectedNotebookId = 0;

     paperworkNotebooksServiceFactory.createNotebook = function(data, callback) {
       netService.apiPost('/notebooks', data, callback);
     };

     paperworkNotebooksServiceFactory.updateNotebook = function(notebookId, data, callback) {
       netService.apiPut('/notebooks/' + notebookId, data, callback);
     };

     paperworkNotebooksServiceFactory.deleteNotebook = function(notebookId, callback) {
       netService.apiDelete('/notebooks/' + notebookId, callback);
     };

     paperworkNotebooksServiceFactory.deleteTag = function(tagId, callback) {
       netService.apiDelete('/tags/' + tagId, callback);
     };

     paperworkNotebooksServiceFactory.getNotebooks = function() {
       netService.apiGet('/notebooks', function(status, data) {
         if(status == 200) {
           $rootScope.notebooks = data.response;
         }
       });
     };

     paperworkNotebooksServiceFactory.getNotebookById = function(notebookId) {
       netService.apiGet('/notebooks/' + notebookId, function(status, data) {
         if(status == 200) {
           $rootScope.notebook = data.response;
         }
       });
     };

     paperworkNotebooksServiceFactory.getNotebookByIdLocal = function(notebookId) {
       var i = 0, l = $rootScope.notebooks.length;
       for(i = 0; i < l; i++) {
         if($rootScope.notebooks[i].id == notebookId) {
           return $rootScope.notebooks[i];
         }
       }
       return null;
     };

     paperworkNotebooksServiceFactory.getNotebookShortcuts = function() {
       netService.apiGet('/shortcuts', function(status, data) {
         if(status == 200) {
           $rootScope.shortcuts = data.response;
         }
       });
     };

     paperworkNotebooksServiceFactory.getShortcutByNotebookIdLocal = function(notebookId) {
       var i = 0, l = $rootScope.shortcuts.length;
       for(i = 0; i < l; i++) {
         if($rootScope.shortcuts[i].id == notebookId) {
           return $rootScope.shortcuts[i];
         }
       }
       return null;
     };

     paperworkNotebooksServiceFactory.getTags = function() {
       netService.apiGet('/tags', function(status, data) {
         if(status == 200) {
           $rootScope.tags = data.response;
         }
       });
     };

     return paperworkNotebooksServiceFactory;
   }]);

angular.module('paperworkNotes').factory('NotesService',
  ['$rootScope', '$http', 'base64', 'NetService',
   function($rootScope, $http, base64, netService) {
     var paperworkNotesServiceFactory = {};

     // paperworkNotesServiceFactory.selectedNoteIndex = 0;

     paperworkNotesServiceFactory.createNote = function(notebookId, data, callback) {
       netService.apiPost('/notebooks/' + notebookId + '/notes', data, callback);
     };

     paperworkNotesServiceFactory.updateNote = function(noteId, data, callback) {
       netService.apiPut('/notebooks/0/notes/' + noteId, data, callback);
     };

     paperworkNotesServiceFactory.deleteNote = function(noteId, callback) {
       netService.apiDelete('/notebooks/0/notes/' + noteId, callback);
     };

     paperworkNotesServiceFactory.moveNote = function(notebookId, noteId, toNotebookId, callback) {
       netService.apiGet('/notebooks/' + notebookId + '/notes/' + noteId + '/move/' + toNotebookId, function(status, data) {
         if(status == 200) {
           // $rootScope.notes = data.response;
           if(typeof callback != "undefined") {
             callback(notebookId, noteId, toNotebookId);
           }
         }
       });
     };

     paperworkNotesServiceFactory.getNotesInNotebook = function(notebookId, callback) {
       netService.apiGet('/notebooks/' + notebookId + '/notes', function(status, data) {
         if(status == 200) {
           $rootScope.notes = data.response;
           if(typeof callback != "undefined") {
             callback();
           }
         }
       });
     };

     paperworkNotesServiceFactory.getNotesInTag = function(tagId) {
       netService.apiGet('/tagged/' + tagId, function(status, data) {
         if(status == 200) {
           $rootScope.notes = data.response;
         }
       });
     };

     paperworkNotesServiceFactory.getNoteById = function(noteId, callback) {
       netService.apiGet('/notebooks/0/notes/' + noteId, function(status, data) {
         if(status == 200) {
           $rootScope.note = data.response;
           if(typeof callback != "undefined") {
             callback(data.response);
           }
         }
       });
     };

     paperworkNotesServiceFactory.getNotesFromSearch = function(query) {
       netService.apiGet('/search/' + base64.encode(query), function(status, data) {
         if(status == 200) {
           $rootScope.notes = data.response;
         }
       });
     };

     paperworkNotesServiceFactory.getNoteVersionAttachments = function(notebookId, noteId, versionId, callback) {
       netService.apiGet('/notebooks/' + notebookId + '/notes/' + noteId + '/versions/' + versionId + '/attachments', function(status, data) {
         if(status == 200) {
           if(typeof callback != "undefined") {
             callback(data.response);
           }
         }
       });
     };

     paperworkNotesServiceFactory.deleteNoteVersionAttachment = function(notebookId, noteId, versionId, attachmentId, callback) {
       netService.apiDelete('/notebooks/' + notebookId + '/notes/' + noteId + '/versions/' + versionId + '/attachments/' + attachmentId, callback);
     };

     return paperworkNotesServiceFactory;
   }]);

angular.module('paperworkNotes').controller('NotesAllController',
  ['$scope', '$rootScope', '$location', '$routeParams', 'NotesService',
   function($scope, $rootScope, $location, $routeParams, notesService) {
     if(typeof $routeParams == "undefined" || $routeParams == {} || typeof $routeParams.notebookId == "undefined") {
       return;

       // fixme
       // $rootScope.notebookSelectedId = 0;
     } else {
       $rootScope.notebookSelectedId = parseInt($routeParams.notebookId);
     }
     notesService.getNotesInNotebook($rootScope.getNotebookSelectedId(), function() {
       // $rootScope.setNoteSelectedId($rootScope.getNotebookSelectedId(), $rootScope.notes[0].id);
       if($rootScope.notes.length > 0) {
         $location.path("/n/" + $scope.notebookSelectedId + "/" + $rootScope.notes[0].id);
       }
     });

     $rootScope.editMultipleNotes = false;
     $rootScope.navbarMainMenu = true;
     $rootScope.navbarSearchForm = true;
     $rootScope.expandedNoteLayout = false;

     $rootScope.note = null;
   }]);

angular.module('paperworkNotes').controller('NotesEditController',
  ['$scope', '$rootScope', '$location', '$routeParams', 'NotesService', 'paperworkApi',
    function($scope, $rootScope, $location, $routeParams, notesService, paperworkApi) {
      window.onCkeditChangeFunction = function() {
        // FIXME jQuery un angular is anti-pattern
        // Let's access our $rootScope from within jQuery (this)
        _$scope = $('body').scope();
        _$rootScope = _$scope.$root;
        _$scope.$apply(function() {
          _$rootScope.templateNoteEdit.modified = true;
        });
      };

      window.hasCkeditChangedFunction = function() {
        // Let's access our $rootScope from within jQuery (this)
        _$scope = $('body').scope();
        _$rootScope = _$scope.$root;
        return _$rootScope.templateNoteEdit.modified;
      };

      var thisController = function(notebookId, noteId, _onChangeFunction) {
        $rootScope.noteSelectedId = {'notebookId': notebookId, 'noteId': noteId};
        $rootScope.versionSelectedId = {'notebookId': notebookId, 'noteId': noteId, 'versionId': 0};
        notesService.getNoteById(noteId);
        $rootScope.templateNoteEdit = $rootScope.getNoteByIdLocal(noteId);
        if(typeof $rootScope.templateNoteEdit == "undefined" || $rootScope.templateNoteEdit == null) {
          $rootScope.templateNoteEdit = {};
        }

        notesService.getNoteVersionAttachments($rootScope.getNotebookSelectedId(), ($rootScope.getNoteSelectedId(true)).noteId, $rootScope.getVersionSelectedId(true).versionId,
          function(response) {
            $rootScope.fileList = response;
          });

        if(typeof $rootScope.templateNoteEdit.tags != "undefined" && $rootScope.templateNoteEdit.tags.length > 0) {
          for(var i = 0; i < $rootScope.templateNoteEdit.tags.length; i++) {
            $('input#tags').tagsinput('add', $rootScope.templateNoteEdit.tags[i].title);
          }
        }

        $('input#tags').on('beforeItemAdd', function(ev) {
          // console.log(ev.item);
          // ev.item = ev.item.replace('+', '');
          window.onCkeditChangeFunction();
        }).on('itemRemoved', function() {
          window.onCkeditChangeFunction();
        });

        var ck = CKEDITOR.replace('content', {
          fullPage:               false,
          // extraPlugins: 'myplugin,anotherplugin',
          // removePlugins: 'sourcearea,save,newpage,preview,print,forms',
          toolbarCanCollapse:     true,
          toolbarStartupExpanded: false,
          tabSpaces:              4,
          skin:                   'bootstrapck',
          height:                 '400px',

          autosave_saveOnDestroy:          true,
          autosave_saveDetectionSelectors: "[id*='updateNote']"
        });

        ck.on('change', _onChangeFunction);

        window.onbeforeunloadInfo = $rootScope.i18n.messages.onbeforeunload_info;
        window.onbeforeunload = function() {
          if(window.hasCkeditChangedFunction()) {
            return window.onbeforeunloadInfo;
          }
        };
      };

      var loadedTags = $rootScope.tags;

      var userTags = new Bloodhound({
        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('title'),
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        local:          loadedTags
      });

      userTags.initialize();

      $('input#tags').tagsinput({
        allowDuplicates: false,
        trimValue:       true,
        freeInput:       true,
        tagClass:        function(item) {
          if(item[0] == '+') {
            return "input-tag-public";
          } else {
            return "input-tag-private";
          }
        },
        typeaheadjs:     {
          name:       'tags',
          displayKey: 'title',
          valueKey:   'title',
          source:     userTags.ttAdapter()
        }
      });
      // This doesn't seem to be working. I might be patching the tagsinput plugin someday to get this working cleanly.
      // $('input#tags').tagsinput('focus');
      // $('input#tags').find('input.tt-input').blur(function() {
      //   var e = jQuery.Event('keydown', { which: 13 });
      //   $(this).trigger(e);
      // });

      $scope.$on('deleteAttachmentLink', function(ev, args) {
        if(typeof args == "undefined" || typeof args.url == "undefined") {
          return false;
        }

        var documentNode = CKEDITOR.instances['content'].document.$,
          elementCollection = documentNode.getElementsByTagName('a');

        var i = elementCollection.length;
        while(i--) {
          var element = elementCollection[i];
          if(element.getAttribute("href") == args.url) {
            element.parentNode.removeChild(element);
          }
        }
      });

      $scope.$on('insertAttachmentLink', function(ev, args) {
        if(typeof args == "undefined" || typeof args.url == "undefined" || typeof args.mimetype == "undefined") {
          return false;
        }

        var insertHtml = "";

        switch(args.mimetype.match(/^[a-z]+\/*/g)[0]) {
          case "image/":
            insertHtml = '<a href="' + args.url + '" title="' + args.filename + '" target="_blank">' + '<img src="' + args.url + '" alt="' + args.filename + '">' + '</a>';
            break;
          default:
            insertHtml = '<a href="' + args.url + '" title="' + args.filename + '" target="_blank">' + args.filename + '</a>';
        }

        CKEDITOR.instances['content'].insertHtml(insertHtml);
      });

      $rootScope.uploadUrl = paperworkApi + '/notebooks/' + parseInt($routeParams.notebookId) + '/notes/' + parseInt($routeParams.noteId) + '/versions/0/attachments';

      if(typeof $rootScope.notes == "undefined") {
        notesService.getNotesInNotebook($rootScope.notebookSelectedId, (function(_notebookId, _noteId) {
          return function() {
            thisController(_notebookId, _noteId, function() {
              window.onCkeditChangeFunction();
            });
          }
        })(parseInt($routeParams.notebookId), parseInt($routeParams.noteId)));
      } else {
        thisController(parseInt($routeParams.notebookId), parseInt($routeParams.noteId), function() {
          window.onCkeditChangeFunction();
        });
      }

      $rootScope.navbarMainMenu = false;
      $rootScope.navbarSearchForm = false;
      $rootScope.expandedNoteLayout = true;
    }]);

angular.module('paperworkNotes').controller('NotesListController',
  ['$scope', '$rootScope', '$location', '$routeParams', 'NotesService',
    function($scope, $rootScope, $location, $routeParams, notesService) {
    $rootScope.noteSelectedId = {};
    $rootScope.notesSelectedIds = [];
    notesService.getNotesInNotebook(0);

    $scope.noteSelect = function($notebookId, $noteId) {
      $rootScope.noteSelectedId = { 'notebookId': parseInt($notebookId), 'noteId': parseInt($noteId) };
    };

    $scope.getNoteLink = function(notebookId, noteId) {

      var path = "/n/" + parseInt(notebookId) + "/" + parseInt(noteId);
      if($location.$$path.match(/^\/s\//i) != null) {
        var basePath = $location.$$path.match(/(^\/s\/[^\/]*)/i);
        return basePath[1] + path;
      }
      return path;
    };

}]);

angular.module('paperworkNotes').controller('NotesShowController',
  ['$scope', '$rootScope', '$location', '$routeParams', 'NotesService', 'NetService',
   function($scope, $rootScope, $location, $routeParams, notesService, netService) {
     if(!angular.isNumber(parseInt($routeParams.noteId)) || $routeParams.noteId === "undefined") {
       return;
     }

     $rootScope.notebookSelectedId = parseInt($routeParams.notebookId);
     $rootScope.noteSelectedId = {'notebookId': parseInt($routeParams.notebookId), 'noteId': parseInt($routeParams.noteId)};
     $rootScope.versionSelectedId = {'notebookId': parseInt($routeParams.notebookId), 'noteId': parseInt($routeParams.noteId), 'versionId': 0};

     if(typeof $routeParams.searchQuery == "undefined" || $routeParams.searchQuery == null || $routeParams.searchQuery.length <= 0) {
       notesService.getNotesInNotebook($rootScope.getNotebookSelectedId());
     }

     notesService.getNoteById(parseInt($routeParams.noteId));

     notesService.getNoteVersionAttachments($rootScope.getNotebookSelectedId(), ($rootScope.getNoteSelectedId(true)).noteId, $rootScope.getVersionSelectedId(true).versionId,
       function(response) {
         $rootScope.fileList = response;
       });

     $('body').popover({
       selector:  '#note-info',
       container: 'body',
       viewport:  {
         selector: '#paperworkView',
         padding:  16
       },
       trigger:   'click',
       html:      true
     });

     $rootScope.navbarMainMenu = true;
     $rootScope.navbarSearchForm = true;
     $rootScope.expandedNoteLayout = false;
   }]);

angular.module('paperworkNotes').controller('SearchController',
  ['$scope', '$rootScope', '$location', '$routeParams', 'NotesService',
   function($scope, $rootScope, $location, $routeParams, notesService) {
     var sQ = $routeParams.searchQuery;

     $rootScope.search = sQ;

     notesService.getNotesFromSearch(sQ);
     $rootScope.note = null;

     $rootScope.navbarMainMenu = true;
     $rootScope.navbarSearchForm = true;
     $rootScope.expandedNoteLayout = false;
   }]);

angular.module('paperworkNotes').controller('SidebarNotebooksController',
  ['$scope', '$rootScope', '$location', '$routeParams', 'NotebooksService',
   function($scope, $rootScope, $location, $routeParams, notebooksService) {
     $rootScope.notebookSelectedId = 0;
     $rootScope.tagsSelectedId = -1;

     $scope.isVisible = function() {
       return !$rootScope.expandedNoteLayout;
     };

     $scope.notebookIconByType = function(type) {
       switch(parseInt(type)) {
         case 0:
           return 'fa-book';
           break;
         case 1:
           return 'fa-folder-open';
           break;
         case 2:
           return 'fa-archive';
           break;
       }
     };

     $rootScope.getNotebookSelectedId = function() {
       return $rootScope.notebookSelectedId;
     };

     $scope.openNotebook = function(notebookId, type, index) {
       if(parseInt(type) == 0 || parseInt(type) == 2) {
         // If the notebooks tree should be collapsed, expand it,
         // so the user sees which notebook is being selected through the shortcut.
         var $treeHeaderNotebooks = jQuery('.tree-header-notebooks');
         if($treeHeaderNotebooks.children('.fa').hasClass('fa-chevron-right')) {
           $treeHeaderNotebooks.click();
         }

         $rootScope.notebookSelectedId = parseInt(index);
         $rootScope.tagsSelectedId = -1;
         $rootScope.search = "";
         $location.path("/n/" + parseInt(notebookId));
       }
     };

     $rootScope.openTag = function(tagId) {
       $rootScope.notebookSelectedId = -1;
       $rootScope.tagsSelectedId = parseInt(tagId);
       $location.path("/s/tagid:" + parseInt(tagId));
     };

     $scope.modalNewNotebook = function() {
       $rootScope.modalNotebook = {
         'action':   'create',
         'shortcut': '',
         'title':    ''
       };
       $('#modalNotebook').modal("show");
     };

     $scope.modalNotebookSubmit = function() {
       var data = {
         'type':     0,
         'title':    $rootScope.modalNotebook.title,
         'shortcut': $rootScope.modalNotebook.shortcut
       };

       var callback = (function(_paperworkNotebooksService) {
         return function(status, data) {
           switch(status) {
             case 200:
               // FIXME
               $('#modalNotebook').modal('hide');
               _paperworkNotebooksService.getNotebooks();
               _paperworkNotebooksService.getNotebookShortcuts(null);
               break;
             case 400:
               if(typeof data.errors.title != "undefined") {
                 // FIXME
                 $('#modalNotebook').find('input[name="title"]').parents('.form-group').addClass('has-warning');
               }
               break;
           }
         };
       })(notebooksService);

       if($rootScope.modalNotebook.action == "create") {
         notebooksService.createNotebook(data, callback);
       } else if($rootScope.modalNotebook.action == "edit") {
         // if($rootScope.modalNotebook.delete) {
         // NotebooksService.deleteNotebook($rootScope.modalNotebook.id, callback);
         // } else {
         notebooksService.updateNotebook($rootScope.modalNotebook.id, data, callback);
         // }
       }
     };

     $scope.notebookSelectedModel = 0;
     $scope.modalNotebookSelectSubmit = function(notebookId, noteId, toNotebookId) {
       $rootScope.modalMessageBox.theCallback(notebookId, noteId, toNotebookId);
     };

     $scope.modalEditNotebook = function(notebookId) {
       var notebook = notebooksService.getNotebookByIdLocal(notebookId);

       if(notebook == null || $rootScope.menuItemNotebookClass() === 'disabled') {
         return false;
       }

       $rootScope.modalNotebook = {
         'action': 'edit',
         'id':     notebookId,
         'title':  notebook.title
       };

       var shortcut = notebooksService.getShortcutByNotebookIdLocal(notebookId);

       if(shortcut == null) {
         $rootScope.modalNotebook.shortcut = false;
       } else {
         $rootScope.modalNotebook.shortcut = true;
       }

       // FIXME
       $('#modalNotebook').modal("show");
     };

     $scope.modalDeleteNotebook = function(notebookId) {

       if($rootScope.menuItemNotebookClass() === 'disabled') {
         return false;
       }

       var callback = (function() {
         return function(status, data) {
           switch(status) {
             case 200:
               notebooksService.getNotebookShortcuts(null);
               notebooksService.getNotebooks();
               $location.path("/n/0");
               break;
             case 400:
               // TODO: Show some kind of error
               break;
           }
         };
       })();

       $rootScope.messageBox({
         'title':   $rootScope.i18n.keywords.delete_notebook_question,
         'content': $rootScope.i18n.keywords.delete_notebook_message,
         'buttons': [
           {
             // We don't need an id for the dismiss button.
             // 'id': 'button-no',
             'label':     $rootScope.i18n.keywords.cancel,
             'isDismiss': true
           },
           {
             'id':    'button-yes',
             'label': $rootScope.i18n.keywords.yes,
             'class': 'btn-warning',
             'click': function() {
               notebooksService.deleteNotebook(notebookId, callback);
               return true;
             },
           }
         ]
       });
     };

     $scope.modalManageTags = function () {
         $('#modalManageTags').modal("show");
     };

     notebooksService.getNotebookShortcuts(null);
     notebooksService.getNotebooks();
     $rootScope.tags = notebooksService.getTags();
   }]);

angular.module('paperworkNotes').controller('SidebarNotesController',
  ['$scope', '$rootScope', '$location', '$timeout', '$routeParams', 'NotebooksService', 'NotesService',
    function($scope, $rootScope, $location, $timeout, $routeParams, notebooksService, notesService) {
      $scope.isVisible = function() {
        return !$rootScope.expandedNoteLayout;
      };

      $rootScope.getNoteSelectedId = function(asObject) {
        if(asObject === true) {
          return $rootScope.noteSelectedId;
        }
        return $rootScope.noteSelectedId.notebookId + "-" + $rootScope.noteSelectedId.noteId;
      };

      $rootScope.setNoteSelectedId = function(notebookId, noteId) {
        $rootScope.noteSelectedId.notebookId = notebookId;
        $rootScope.noteSelectedId.noteId = noteId;
      };

      $rootScope.getNoteByIdLocal = function(noteId) {
        var i = 0, l = $rootScope.notes.length;
        for(i = 0; i < l; i++) {
          if($rootScope.notes[i].id == noteId) {
            return $rootScope.notes[i];
          }
        }
        return null;
      };

      $scope.newNote = function(notebookId) {
        if($rootScope.menuItemNotebookClass() === 'disabled') {
          return false;
        }
        if(typeof notebookId == "undefined" || notebookId == 0) {
          // TODO: Show some error
        }

        var data = {
          'title':           $rootScope.i18n.keywords.untitled || 'Untitled',
          'content':         '',
          'content_preview': ''
        };

        var callback = (function(_notebookId) {
          return function(status, data) {
            switch(status) {
              case 200:
                $rootScope.templateNoteEdit = {};
                $location.path("/n/" + _notebookId + "/" + data.response.id + "/edit");
                break;
              case 400:
                // TODO: Show some kind of error
                break;
            }
          };
        })(notebookId);

        notesService.createNote(notebookId, data, callback);
      };

      $scope.editNote = function(notebookId, noteId) {
        if($rootScope.menuItemNoteClass('single') === 'disabled') {
          return false;
        }
        $location.path("/n/" + notebookId + "/" + noteId + "/edit");
      };

      $scope.editNotes = function(notebookId, noteId) {
        if($rootScope.menuItemNoteClass('multiple') === 'disabled') {
          return false;
        }

        if($rootScope.editMultipleNotes == true) {
          $rootScope.editMultipleNotes = false;
        } else {
          $rootScope.editMultipleNotes = true;
        }
      };

      $scope.updateNote = function() {
        // if(typeof $rootScope.templateNoteEdit == "undefined" || $rootScope.templateNoteEdit == null) {
        //   $rootScope.templateNoteEdit = {};
        // }

        $rootScope.templateNoteEdit.content = CKEDITOR.instances.content.getData();

        var data = {
          'title':   $rootScope.templateNoteEdit.title,
          'content': $rootScope.templateNoteEdit.content,
          'tags':    $('input#tags').tagsinput('items')
        };

        var callback = (function() {
          return function(status, data) {
            switch(status) {
              case 200:
                $rootScope.errors = {};
                $rootScope.templateNoteEdit.modified = false;
                // TODO: Show cool success message
                break;
              case 400:
                $rootScope.errors = data.errors;
                $rootScope.messageBox({
                  'title':   $rootScope.i18n.messages.error_message,
                  'content': data.errors,
                  'buttons': [
                    {
                      // We don't need an id for the dismiss button.
                      // 'id': 'button-no',
                      'label':     $rootScope.i18n.keywords.damn,
                      'isDismiss': true
                    }
                  ]
                });
                break;
            }
          };
        })();

        notesService.updateNote($rootScope.note.id, data, callback);
      };

      $scope.closeNote = function() {
        var closeNoteCallback = function() {
          var currentNote = $rootScope.getNoteSelectedId(true);
          $location.path("/n/" + $rootScope.getNotebookSelectedId() + "/" + currentNote.noteId);
          CKEDITOR.instances.content.destroy();
          $rootScope.templateNoteEdit = {};
          notebooksService.getTags();
          return true;
        };

        if($rootScope.templateNoteEdit && $rootScope.templateNoteEdit.modified) {
          $rootScope.messageBox({
            'title':   $rootScope.i18n.keywords.close_without_saving_question,
            'content': $rootScope.i18n.keywords.close_without_saving_message,
            'buttons': [
              {
                // We don't need an id for the dismiss button.
                // 'id': 'button-no',
                'label':     $rootScope.i18n.keywords.cancel,
                'isDismiss': true
              },
              {
                'id':    'button-yes',
                'label': $rootScope.i18n.keywords.yes,
                'class': 'btn-warning',
                'click': function() {
                  return closeNoteCallback();
                }
              }
            ]
          });
        } else {
          return closeNoteCallback();
        }
      };

      $scope.modalDeleteNote = function(notebookId, noteId) {
        if($rootScope.menuItemNoteClass('multiple') === 'disabled') {
          return false;
        }
        var callback = (function() {
          return function(status, data) {
            switch(status) {
              case 200:
                $location.path("/n/" + notebookId);
                break;
              case 400:
                // TODO: Show some kind of error
                break;
            }
          };
        })();

        $rootScope.messageBox({
          'title':   ($rootScope.editMultipleNotes ? $rootScope.i18n.keywords.delete_notes_question : $rootScope.i18n.keywords.delete_note_question),
          'content': ($rootScope.editMultipleNotes ? $rootScope.i18n.keywords.delete_notes_message : $rootScope.i18n.keywords.delete_note_message),
          'buttons': [
            {
              // We don't need an id for the dismiss button.
              // 'id': 'button-no',
              'label':     $rootScope.i18n.keywords.cancel,
              'isDismiss': true
            },
            {
              'id':    'button-yes',
              'label': $rootScope.i18n.keywords.yes,
              'class': 'btn-warning',
              'click': function() {
                if($rootScope.editMultipleNotes) {
                  noteId = [];
                  angular.forEach($rootScope.notesSelectedIds, function(isChecked, checkedNoteId) {
                    if(isChecked) {
                      noteId.push(checkedNoteId);
                    }
                  });
                }
                notesService.deleteNote(noteId, callback, function() {
                  $location.path("/n/" + notebookId);
                });
                return true;
              }
            }
          ]
        });
      };

      $scope.modalMoveNote = function(notebookId, noteId) {

        if($rootScope.menuItemNoteClass('multiple') === 'disabled') {
          return false;
        }

        $rootScope.modalNotebookSelect({
          'notebookId':  notebookId,
          'noteId':      noteId,
          'theCallback': function(notebookId, noteId, toNotebookId) {
            if($rootScope.editMultipleNotes) {
              noteId = [];
              angular.forEach($rootScope.notesSelectedIds, function(isChecked, checkedNoteId) {
                if(isChecked) {
                  noteId.push(checkedNoteId);
                }
              });
            }
            notesService.moveNote(notebookId, noteId, toNotebookId, function(_notebookId, _noteId, _toNotebookId) {
              $('#modalNotebookSelect').modal('hide');
              $location.path("/n/" + parseInt(_toNotebookId));
            });
            return true;
          }
        });
      };

      $scope.submitSearch = function() {
        if($scope.search == "") {
          $location.path("/");
        } else {
          $location.path("/s/" + encodeURIComponent($scope.search));
        }
      };
    }]);

angular.module('paperworkNotes').controller('SidebarTagsController',
    ['$scope', '$rootScope', '$location', '$routeParams', 'NotebooksService', 'paperworkApi', 'NotesService',
        function ($scope, $rootScope, $location, $routeParams, notebooksService, paperworkApi, notesService) {
            $scope.modalTags = [];

            $('#modalManageTags').on('hidden.bs.modal', function (e) {
                $scope.modalTags = [];
                $scope.$apply();    // Because not angular scope
            });
            $('#modalManageTags').on('show.bs.modal', function (e) {
                $scope.modalTags = $rootScope.tags;
            });

            $scope.$on('ngRepeatFinished', function(ngRepeatFinishedEvent) {
                $('#modalManageTags .tag-line').editable({
                    mode: 'inline',
                    url: function (data) {
                        $.ajax({
                            url: paperworkApi + '/tags/' + data['pk'],
                            data: {
                                title: data['value']
                            },
                            type: 'PUT',
                            error: function (jqXHR) {
                                $('#modalManageTags').find(".tag-line[data-pk='" + data['pk'] + "']").tooltip({
                                    title: jqXHR.responseJSON.errors.title,
                                    trigger: 'manual'
                                }).tooltip('show');
                            },
                            success: function () {
                                notebooksService.getTags();
                                if($rootScope.note) {
                                    notesService.getNoteById(parseInt($rootScope.note.id));
                                }
                            },
                            dataType: 'json'
                        });
                    }
                }).on('shown', function (e, editable) {
                    editable.$element.tooltip('destroy');
                });
            });

            $scope.deleteTag = function (tagId) {
                // show second modal - need changing z-index
                $rootScope.modalMessageBox = {
                    'title': $rootScope.i18n.keywords.delete_tag_question,
                    'content': $rootScope.i18n.keywords.delete_tag_message,
                    'buttons': [
                        {
                            'label':     $rootScope.i18n.keywords.cancel,
                            'isDismiss': true
                        },
                        {
                            'id': 'button-yes',
                            'label': $rootScope.i18n.keywords.yes,
                            'class': 'btn-warning',
                            'click': function () {
                                notebooksService.deleteTag(tagId, function () {
                                    notebooksService.getTags();
                                    if($rootScope.note) {
                                        notesService.getNoteById(parseInt($rootScope.note.id));
                                    }
                                    $('#modalManageTags').find(".tag-line[data-pk='" + tagId + "']").closest('.row').remove();
                                });
                                return true;
                            }
                        }
                    ]
                };
                $('#modalMessageBox').modal('show');
            }
        }]);
angular.module('paperworkNotes').controller('VersionsController',
  ['$scope', '$rootScope', '$location', '$timeout', '$routeParams',
    function($scope, $rootScope, $location, $timeout, $routeParams){
    // TODO
    }]);

angular.module('paperworkNotes').factory('VersionsService',
  ['$rootScope', '$http', 'NetService',
   function($rootScope, $http, NetService) {
     var paperworkVersionsServiceFactory = {};

     paperworkVersionsServiceFactory.getVersionById = function(notebookId, noteId, versionId) {
       paperworkNetService.apiGet('/notebooks/' + notebookId + '/notes/' + noteId + '/versions/' + versionId, function(status, data) {
         if(status == 200) {
           $rootScope.version = data.response;
         }
       });
     };

     paperworkVersionsServiceFactory.getVersionAttachments = function(notebookId, noteId, versionId, callback) {
       paperworkNetService.apiGet('/notebooks/' + notebookId + '/notes/' + noteId + '/versions/' + versionId + '/attachments', function(status, data) {
         if(status == 200) {
           if(typeof callback != "undefined") {
             callback(data.response);
           }
         }
       });
     };

     return paperworkVersionsServiceFactory;
   }]);

angular.module('paperworkNotes').controller('WaybackController',
  ['$scope', '$rootScope', '$location', '$routeParams', 'NetService', 'NotesService',
   function($scope, $rootScope, $location, $routeParams, netService, notesService) {
     // FIXME
     $('#paperworkViewParent').off('picked.freqselector').on('picked.freqselector', function(e) {
       var itemId = $(e.item).data('itemid');

       netService.apiGet('/notebooks/' + $rootScope.getNotebookSelectedId() + '/notes/' + ($rootScope.getNoteSelectedId(true)).noteId + '/versions/' + itemId,
         function(status, data) {
           if(status == 200) {
             $rootScope.note.title = data.response.title;
             $rootScope.note.content = data.response.content;
             if(data.response.next_id === null) {
               itemId = 0;
             }
             $rootScope.note.version = itemId;
           }
         });

       notesService.getNoteVersionAttachments($rootScope.getNotebookSelectedId(), ($rootScope.getNoteSelectedId(true)).noteId, itemId, function(response) {
         $rootScope.fileList = response;
       });

     });
   }]);

angular.module('paperworkNotes').controller('ViewController',
  ['$scope', '$rootScope', '$location', '$routeParams', 'NotesService',
   function($scope, $rootScope, $location, $routeParams, notesService) {
     $scope.isVisible = function() {
       return !$rootScope.expandedNoteLayout;
     }
   }]);
